{"version":3,"sources":["components/CheckoutSummary/CheckOutsummary.js","containers/Contactdata/Contactdata.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/CheckoutSummary/checkOutSummary.module.css","containers/Contactdata/contactdata.module.css"],"names":["checkoutSummary","props","className","classes","checkOutSummary","style","width","margin","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactForm","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","formIsValid","checkValidity","Rule","isValid","trim","length","OrderHandler","event","preventDefault","formData","formElementIdentifier","order","ingredient","ing","price","totalPrice","orderData","userId","onPurchaseBurger","token","inputChangedHandler","inputIdentifier","updatedOrderForm","updatedFormElement","target","console","log","setState","formElementArray","key","this","push","id","config","form","onSubmit","contactData","map","formElement","Input","invalid","shouldValidated","changed","disabled","loading","textAlign","Component","connect","burgerBuilder","auth","tokenId","dispatch","action","WithErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirect","purchasing","path","match","component","Contactdata","input","inputClasses","InputElement","inputElement","validationError","color","join","onChange","option","Label","label","module","exports"],"mappings":"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","file":"static/js/3.f96cb7cb.chunk.js","sourcesContent":["import React from \"react\";\nimport Burger from \"../burger/burger\";\nimport Button from \"../UI/Button/Button\";\nimport classes from \"./checkOutSummary.module.css\";\n\nconst checkoutSummary = props => {\n  return (\n    <div className={classes.checkOutSummary}>\n      <h1>We hope it tastes well!</h1>\n      <div style={{ width: \"100%\", margin: \"auto\" }}>\n        <Burger ingredients={props.ingredients} />\n      </div>\n      <Button btnType=\"Danger\" clicked={props.checkoutCancelled}>\n        CANCEL\n      </Button>\n      <Button btnType=\"Success\" clicked={props.checkoutContinued}>\n        CONTINUE\n      </Button>\n    </div>\n  );\n};\n\nexport default checkoutSummary;\n","import React, { Component } from \"react\";\nimport Button from \"../../components/UI/Button/Button\";\nimport classes from \"./contactdata.module.css\";\nimport axios from \"../../axios-orders\";\nimport Spinner from \"../../components/UI/spinner/spinner\";\nimport Input from \"../../components/UI/Input/Input\";\nimport { connect } from \"react-redux\";\nimport WithErrorHandler from \"../../hoc/WithErrorHandler/WithErrorHandler\";\nimport * as action from \"../../store/actions/index\";\nclass ContactForm extends Component {\n  state = {\n    orderForm: {\n      name: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"your Name\"\n        },\n        value: \"\",\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      street: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \" street\"\n        },\n        value: \"\",\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      zipCode: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Zip code\"\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 5,\n          maxLength: 5\n        },\n        valid: false,\n        touched: false\n      },\n      country: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Country\"\n        },\n        value: \"\",\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      email: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"email\",\n          placeholder: \" your email\"\n        },\n        value: \"\",\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      deliveryMethod: {\n        elementType: \"select\",\n        elementConfig: {\n          options: [\n            { value: \"fastest\", displayValue: \"Fastest\" },\n            { value: \"cheapest\", displayValue: \"Cheapest\" }\n          ]\n        },\n        value: \"\",\n        valid: true,\n        validation: {},\n        touched: false\n      }\n    },\n    formIsValid: false\n    // loading: false\n  };\n  checkValidity = (value, Rule) => {\n    let isValid = true;\n    if (Rule.required) {\n      isValid = value.trim() !== \"\" && isValid;\n    }\n    if (Rule.minLength) {\n      isValid = value.length >= Rule.minLength && isValid;\n    }\n    if (Rule.maxLength) {\n      isValid = value.length <= Rule.maxLength && isValid;\n    }\n    return isValid;\n  };\n\n  OrderHandler = event => {\n    event.preventDefault();\n    // this.setState({ loading: true });\n    const formData = {};\n    for (let formElementIdentifier in this.state.orderForm) {\n      formData[formElementIdentifier] = this.state.orderForm[\n        formElementIdentifier\n      ].value;\n    }\n    const order = {\n      ingredient: this.props.ing,\n      price: this.props.totalPrice,\n      orderData: formData,\n      userId: this.props.userId\n    };\n    this.props.onPurchaseBurger(order, this.props.token);\n\n    // axios\n    //   .post(\"/orders.json\", order)\n    //   .then(response => {\n    //     this.setState({ loading: false });\n    //     this.props.history.push(\"/\");\n    //   })\n    //   .catch(error => this.setState({ loading: false }));\n  };\n  inputChangedHandler = (event, inputIdentifier) => {\n    const updatedOrderForm = { ...this.state.orderForm };\n    const updatedFormElement = { ...this.state.orderForm[inputIdentifier] };\n    updatedFormElement.value = event.target.value;\n    console.log(updatedFormElement);\n    updatedFormElement.touched = true;\n    updatedFormElement.valid = this.checkValidity(\n      updatedFormElement.value,\n      updatedFormElement.validation\n    );\n    console.log(updatedFormElement);\n    updatedOrderForm[inputIdentifier] = updatedFormElement;\n    let formIsValid = true;\n    for (let inputIdentifier in updatedOrderForm) {\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n    }\n    this.setState({ orderForm: updatedOrderForm, formIsValid: formIsValid });\n  };\n\n  render() {\n    const formElementArray = [];\n    for (let key in this.state.orderForm) {\n      formElementArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n    let form = (\n      <form onSubmit={this.OrderHandler} className={classes.contactData}>\n        {formElementArray.map(formElement => (\n          <Input\n            invalid={!formElement.config.valid}\n            shouldValidated={formElement.config.validation}\n            key={formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            touched={formElement.config.touched}\n            value={formElement.config.value}\n            changed={event => this.inputChangedHandler(event, formElement.id)}\n          ></Input>\n        ))}\n        <Button disabled={!this.state.formIsValid} btnType=\"Success\">\n          ORDER\n        </Button>\n      </form>\n    );\n    if (this.props.loading) {\n      form = <Spinner />;\n    }\n    return (\n      <div>\n        <h1 style={{ textAlign: \"center\" }}>please fill the form below</h1>\n        {form}\n      </div>\n    );\n  }\n}\nconst mapStateToProps = state => {\n  return {\n    ing: state.burgerBuilder.ingredients,\n    totalPrice: state.burgerBuilder.totalPrice,\n    loading: state.order.loading,\n    token: state.auth.tokenId,\n    userId: state.auth.userId\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    onPurchaseBurger: (orderData, token) =>\n      dispatch(action.purchaseBurger(orderData, token))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(WithErrorHandler(ContactForm, axios));\n","import React, { Component } from \"react\";\nimport CheckOutSummary from \"../../components/CheckoutSummary/CheckOutsummary\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport Contactdata from \"../Contactdata/Contactdata\";\nimport { connect } from \"react-redux\";\nclass Checkout extends Component {\n  // state = {\n  //   ingredients: null, //redux\n  //   totalPrice: 0 //redux\n  // };\n\n  // componentWillMount() {\n  //   console.log(this.props);\n  //   const searchParams = new URLSearchParams(this.props.location.search);\n  //   const ingredients = {};\n  //   let Price = 0;\n  //   for (let pair of searchParams) {\n  //     if (pair[0] == \"Price\") {\n  //       Price = pair[1];\n  //     } else {\n  //       ingredients[pair[0]] = Number(pair[1]);\n  //     }\n  //   }\n\n  //   this.setState({ ingredients: ingredients, totalPrice: Price });\n  // }\n\n  checkoutCancelledHandler = () => {\n    this.props.history.goBack();\n  };\n\n  checkoutContinuedHandler = () => {\n    this.props.history.replace(\"/checkout/contact-data\");\n  };\n\n  render() {\n    let summary = <Redirect to=\"/\" />;\n    if (this.props.ing) {\n      const purchasedRedirect = this.props.purchasing ? (\n        <Redirect to=\"/\" />\n      ) : null;\n      summary = (\n        <div>\n          {purchasedRedirect}\n          <CheckOutSummary\n            ingredients={this.props.ing}\n            checkoutCancelled={this.checkoutCancelledHandler}\n            checkoutContinued={this.checkoutContinuedHandler}\n          />\n          <Route\n            path={this.props.match.path + \"/Contact-data\"}\n            component={Contactdata}\n          />\n        </div>\n      );\n    }\n    return summary;\n  }\n}\nconst mapStateToProps = state => {\n  return {\n    ing: state.burgerBuilder.ingredients,\n    purchasing: state.order.purchasing\n  };\n};\n\nexport default connect(mapStateToProps)(Checkout);\n","import React from \"react\";\nimport classes from \"./Input.module.css\";\n\nconst input = props => {\n  const inputClasses = [classes.InputElement];\n  let inputElement = null;\n  let validationError = null;\n  if (props.invalid && props.shouldValidated && props.touched) {\n    inputClasses.push(classes.invalid);\n  }\n  if (props.invalid && props.touched) {\n    validationError = (\n      <p style={{ color: \"red\", margin: \"5px 0\" }}>\n        please Enter a valid value\n      </p>\n    );\n  }\n  switch (props.elementType) {\n    case \"input\":\n      inputElement = (\n        <input\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case \"textarea\":\n      inputElement = (\n        <textarea\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case \"select\":\n      inputElement = (\n        <select\n          className={inputClasses.join(\" \")}\n          onChange={props.changed}\n          value={props.value}\n        >\n          {props.elementConfig.options.map(option => (\n            <option key={option.value} value={option.value}>\n              {option.displayValue}\n            </option>\n          ))}\n        </select>\n      );\n      break;\n    default:\n      inputElement = (\n        <input\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n        />\n      );\n  }\n\n  return (\n    <div className={classes.Input}>\n      <label className={classes.Label}>{props.label}</label>\n      {inputElement}\n      {validationError}\n    </div>\n  );\n};\n\nexport default input;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"invalid\":\"Input_invalid__1XscM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkOutSummary\":\"checkOutSummary_checkOutSummary__3CTPb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactData\":\"contactdata_contactData__234fH\"};"],"sourceRoot":""}