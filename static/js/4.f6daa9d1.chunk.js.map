{"version":3,"sources":["containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Auth/Auth.module.css"],"names":["auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","passWord","minLength","isSingUp","inputChangedHandler","event","controlName","updatedControls","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","rules","isValid","trim","length","maxLength","test","isNumeric","this","buildingBurger","authRedirectPath","onAuthRedirectPath","formElementArray","key","push","id","config","form","map","formElement","invalid","shouldValidated","changed","loading","errorMessage","error","message","authRedirect","isAuthenticated","to","className","classes","Auth","onSubmit","btnType","clicked","Component","connect","tokenId","burgerBuilder","building","dispatch","password","actions","input","inputClasses","InputElement","inputElement","validationError","style","color","margin","join","onChange","options","option","displayValue","Input","Label","label","module","exports"],"mappings":"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","file":"static/js/4.f6daa9d1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Input from \"../../components/UI/Input/Input\";\nimport Button from \"../../components/UI/Button/Button\";\nimport classes from \"./Auth.module.css\";\nimport * as actions from \"../../store/actions/index\";\nimport { connect } from \"react-redux\";\nimport Spinner from \"../../components/UI/spinner/spinner\";\nimport { Redirect } from \"react-router-dom\";\n\nclass auth extends Component {\n  state = {\n    controls: {\n      email: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"email\",\n          placeholder: \"email address\"\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          isEmail: true\n        },\n        valid: false,\n        touched: false\n      },\n      passWord: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"password\",\n          placeholder: \"password  \"\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 6\n        },\n        valid: false,\n        touched: false\n      }\n    },\n    isSingUp: true\n  };\n  checkValidity(value, rules) {\n    let isValid = true;\n    if (!rules) {\n      return true;\n    }\n\n    if (rules.required) {\n      isValid = value.trim() !== \"\" && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  }\n\n  componentDidMount() {\n    if (!this.props.buildingBurger && this.props.authRedirectPath !== \"/\") {\n      this.props.onAuthRedirectPath();\n    }\n  }\n  inputChangedHandler = (event, controlName) => {\n    const updatedControls = {\n      ...this.state.controls,\n      [controlName]: {\n        ...this.state.controls[controlName],\n        value: event.target.value,\n        valid: this.checkValidity(\n          event.target.value,\n          this.state.controls[controlName].validation\n        ),\n        touched: true\n      }\n    };\n    this.setState({ controls: updatedControls });\n  };\n  submitHandler = event => {\n    event.preventDefault();\n    this.props.onAuth(\n      this.state.controls.email.value,\n      this.state.controls.passWord.value,\n      this.state.controls.isSingUp\n    );\n  };\n  switchAuthModeHandler = () => {\n    this.setState(prevState => {\n      return {\n        isSingUp: !prevState.isSingUp\n      };\n    });\n  };\n  render() {\n    const formElementArray = [];\n    for (let key in this.state.controls) {\n      formElementArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n    let form = formElementArray.map(formElement => (\n      <Input\n        invalid={!formElement.config.valid}\n        shouldValidated={formElement.config.validation}\n        key={formElement.id}\n        elementType={formElement.config.elementType}\n        elementConfig={formElement.config.elementConfig}\n        touched={formElement.config.touched}\n        value={formElement.config.value}\n        changed={event => this.inputChangedHandler(event, formElement.id)}\n      ></Input>\n    ));\n    if (this.props.loading) {\n      form = <Spinner />;\n    }\n    let errorMessage = null;\n    if (this.props.error) {\n      errorMessage = <p> {this.props.error.message} </p>;\n    }\n    let authRedirect = null;\n    if (this.props.isAuthenticated) {\n      authRedirect = <Redirect to={this.props.authRedirectPath} />;\n    }\n    return (\n      <div className={classes.Auth}>\n        {authRedirect}\n        {errorMessage}\n        <form onSubmit={this.submitHandler}>\n          {form}\n          <Button btnType=\"Success\">SUBMIT</Button>\n          <Button clicked={this.switchAuthModeHandler} btnType=\"Danger\">\n            switch to {this.state.isSingUp ? \"signIN\" : \"signUp\"}\n          </Button>\n        </form>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.tokenId != null,\n    buildingBurger: state.burgerBuilder.building,\n    authRedirectPath: state.auth.authRedirect\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSingUp) =>\n      dispatch(actions.auth(email, password, isSingUp)),\n    onAuthRedirectPath: () => dispatch(actions.authRedirectPath(\"/\"))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(auth);\n","import React from \"react\";\nimport classes from \"./Input.module.css\";\n\nconst input = props => {\n  const inputClasses = [classes.InputElement];\n  let inputElement = null;\n  let validationError = null;\n  if (props.invalid && props.shouldValidated && props.touched) {\n    inputClasses.push(classes.invalid);\n  }\n  if (props.invalid && props.touched) {\n    validationError = (\n      <p style={{ color: \"red\", margin: \"5px 0\" }}>\n        please Enter a valid value\n      </p>\n    );\n  }\n  switch (props.elementType) {\n    case \"input\":\n      inputElement = (\n        <input\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case \"textarea\":\n      inputElement = (\n        <textarea\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case \"select\":\n      inputElement = (\n        <select\n          className={inputClasses.join(\" \")}\n          onChange={props.changed}\n          value={props.value}\n        >\n          {props.elementConfig.options.map(option => (\n            <option key={option.value} value={option.value}>\n              {option.displayValue}\n            </option>\n          ))}\n        </select>\n      );\n      break;\n    default:\n      inputElement = (\n        <input\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n        />\n      );\n  }\n\n  return (\n    <div className={classes.Input}>\n      <label className={classes.Label}>{props.label}</label>\n      {inputElement}\n      {validationError}\n    </div>\n  );\n};\n\nexport default input;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"invalid\":\"Input_invalid__1XscM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1Zul_\"};"],"sourceRoot":""}